package com.example.emojitest;

import java.io.UnsupportedEncodingException;

import org.apache.commons.lang.StringEscapeUtils;

import may.will.emojitextview.EmojiHandler;
import android.app.Activity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		final EditText editText = (EditText) findViewById(R.id.editText);
		final TextView textView = (TextView) findViewById(R.id.textView);
		final Button button = (Button) findViewById(R.id.button);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				String emoji = editText.getText().toString();

				//	emoji = "Hello World! \ud83d\ude03";
				emoji = "Hello World! \ud83d\ude0A :-)";

				Log.i("Test", ""+emoji);

				/*  NSNonLossyASCIIStringEncoding  */

				/* Method 1 */
				Log.i("Test", "Method1");

				emoji = EmojiHandler.encode(emoji);
				Log.i("Test", ""+emoji);

				emoji = EmojiHandler.decode(emoji);
				Log.i("Test", ""+emoji);

				textView.setText(emoji);

				/* Method 2 */
				Log.i("Test", "Method2");

				String string = "";
				for (char c : emoji.toCharArray()) {
					string += toUnicode(c);
				}
				Log.i("Test", ""+string);

				string = EmojiHandler.decode(string);
				Log.i("Test", ""+string);

				textView.setText(string);

			}

		});

	}

	public String base64Encode(String text) {
		try {
			byte[] data = text.getBytes("UTF-8");
			return Base64.encodeToString(data, Base64.DEFAULT);
		} catch (UnsupportedEncodingException e) {
			return text;
		}
	}

	public String base64Decode(String text) {
		try {
			byte[] data = Base64.decode(text, Base64.DEFAULT);
			return new String(data, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			return text;
		}
	}

	public String encodeToUNICODE(String text) {
		String encoding = "UNICODE";
		try {
			byte[] bytes = (text).getBytes();
			return new String(bytes, encoding);
		} catch (UnsupportedEncodingException e) {
			Log.i("UE", encoding);
			return text;
		}
	}

	public String encodeToUSASCII(String text) {
		String encoding = "US-ASCII";
		try {
			byte[] bytes = (text).getBytes();
			return new String(bytes, encoding);
		} catch (UnsupportedEncodingException e) {
			Log.i("UE", encoding);
			return text;
		}
	}

	public String encodeToUTF8(String text) {
		String encoding = "UTF-8";
		try {
			byte[] bytes = (text).getBytes();
			return new String(bytes, encoding);
		} catch (UnsupportedEncodingException e) {
			Log.i("UE", encoding);
			return text;
		}
	}

	public String encodeToUTF16(String text) {
		String encoding = "UTF-16";
		try {
			byte[] bytes = (text).getBytes();
			return new String(bytes, encoding);
		} catch (UnsupportedEncodingException e) {
			Log.i("UE", encoding);
			return text;
		}
	}

	public String encodeHtml(String emoji) {
		return StringEscapeUtils.escapeHtml(emoji);
	}

	public String decodeHtml(String emoji) {
		return StringEscapeUtils.unescapeHtml(emoji);
	}

	private static String toUnicode(char c) {
		return String.format("\\u%04x", (int) c);
	}

}
